{"version":3,"sources":["components/SearchBox.js","Map.js","index.js"],"names":["useStyles","makeStyles","searchBox","marginTop","boxShadow","input","width","height","fontSize","borderRadius","outline","padding","boxSizing","textOverflow","border","SearchBox","props","onPlacesChanged","controlPosition","google","maps","ControlPosition","TOP_LEFT","classes","searchBoxRef","useRef","ref","current","getPlaces","className","type","placeholder","styles","require","Map","withScriptjs","withGoogleMap","mapRef","useState","zoom","setZoom","lat","lng","center","setCenter","defaultOptions","disableDefaultUI","draggable","keyboardShortcuts","scaleControl","scrollwheel","onDragEnd","getCenter","onZoomChanged","getZoom","data","map","item","key","id","title","name","position","place","geometry","location","rootElement","document","getElementById","ReactDOM","render","style","googleMapURL","loadingElement","containerElement","mapElement"],"mappings":"86FAKMA,EAAYC,YAAW,CAC3BC,UAAW,CACTC,UAAW,GACXC,UAAU,gCAEZC,MAAO,CACLC,MAAO,IACPC,OAAQ,GACRC,SAAU,GACVC,aAAc,EACdC,QAAQ,OACRC,QAAQ,SACRC,UAAU,aACVC,aAAa,WACbC,OAAO,2BAkCIC,EA9BG,SAAAC,GAAU,IAExBC,EAEED,EAFFC,gBAFuB,EAIrBD,EADFE,uBAHuB,MAGLC,OAAOC,KAAKC,gBAAgBC,SAHvB,EAMnBC,EAAUvB,IACVwB,EAAeC,iBAAO,MAM5B,OACE,kBAAC,YAAD,CACEC,IAAKF,EACLP,gBAPa,WACfA,EAAgBO,EAAaG,QAAQC,YAAY,KAO/CV,gBAAiBA,GAEjB,yBAAKW,UAAWN,EAAQrB,WACtB,2BACE4B,KAAK,OACLC,YAAa,YACbF,UAAWN,EAAQlB,W,SCpCvB2B,EAASC,EAAQ,KAiDRC,EA/CHC,uBACVC,yBAAc,SAAApB,GACZ,IAAMqB,EAASZ,iBAAO,MADD,EAEGa,mBAAS,IAFZ,mBAEdC,EAFc,KAERC,EAFQ,OAGOF,mBAAS,CAAEG,IAAK,UAAWC,IAAK,YAHvC,mBAGdC,EAHc,KAGNC,EAHM,KAarB,OACE,6BACE,kBAAC,YAAD,CACEL,KAAMA,EACNb,IAAKW,EACLM,OAAQA,EACRE,eAAgB,CACdC,kBAAkB,EAClBC,WAAW,EACXC,mBAAmB,EACnBC,cAAc,EACdC,aAAa,EACblB,OAAQA,GAEVmB,UAAW,kBAAMP,EAAUP,EAAOV,QAAQyB,cAC1CC,cAAe,kBAAMb,EAAQH,EAAOV,QAAQ2B,aAG5CC,EAAKA,KAAKC,KAAI,SAAAC,GAAI,OAChB,kBAAC,SAAD,CACEC,IAAKD,EAAKE,GACVC,MAAOH,EAAKI,KACZA,KAAMJ,EAAKI,KACXC,SAAU,CAAErB,IAAKgB,EAAKhB,IAAKC,IAAKe,EAAKf,UAGzC,kBAAC,EAAD,CAAWzB,gBAlCW,SAAA8C,GAC1BvB,EAAQ,IACRI,EAAU,CACRH,IAAKsB,EAAMC,SAASC,SAASxB,MAC7BC,IAAKqB,EAAMC,SAASC,SAASvB,iBCjB/BV,EAAS,CACb1B,MAAO,OACPC,OAAQ,SAmBV,IAAM2D,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,mBAjBhB,WACE,OACE,yBAAKC,MAAOvC,GACV,kBAAC,EAAD,CACEa,eAAgB,CAAEI,cAAc,GAChCuB,aAAY,sIACZC,eACE,yBAAKF,MAAO,CAAEhE,OAAO,wBAArB,gBAEFmE,iBAAkB,yBAAKH,MAAO,CAAEhE,OAAO,yBACvCoE,WAAY,yBAAKJ,MAAO,CAAEhE,OAAO,8BAOzB,MAAS2D,K","file":"static/js/main.b42b7c01.chunk.js","sourcesContent":["/* global google */\r\nimport React, { useRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { SearchBox as GoogleSearchBox } from \"react-google-maps/lib/components/places/SearchBox\";\r\n\r\nconst useStyles = makeStyles({\r\n  searchBox: {\r\n    marginTop: 10,\r\n    boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`\r\n  },\r\n  input: {\r\n    width: 240,\r\n    height: 40,\r\n    fontSize: 14,\r\n    borderRadius: 5,\r\n    outline: `none`,\r\n    padding: `0 12px`,\r\n    boxSizing: `border-box`,\r\n    textOverflow: `ellipses`,\r\n    border: `1px solid transparent`\r\n  }\r\n});\r\n\r\nconst SearchBox = props => {\r\n  const {\r\n    onPlacesChanged,\r\n    controlPosition = google.maps.ControlPosition.TOP_LEFT\r\n  } = props;\r\n\r\n  const classes = useStyles();\r\n  const searchBoxRef = useRef(null);\r\n\r\n  const onChange = () => {\r\n    onPlacesChanged(searchBoxRef.current.getPlaces()[0]);\r\n  };\r\n\r\n  return (\r\n    <GoogleSearchBox\r\n      ref={searchBoxRef}\r\n      onPlacesChanged={onChange}\r\n      controlPosition={controlPosition}\r\n    >\r\n      <div className={classes.searchBox}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={\"Where to?\"}\r\n          className={classes.input}\r\n        />\r\n      </div>\r\n    </GoogleSearchBox>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { useState, useRef } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  Marker\r\n} from \"react-google-maps\";\r\nimport SearchBox from \"./components/SearchBox\";\r\nimport data from \"./data/mapData.json\";\r\n\r\nconst styles = require(\"./GoogleMapStyles.json\");\r\n\r\nconst Map = withScriptjs(\r\n  withGoogleMap(props => {\r\n    const mapRef = useRef(null);\r\n    const [zoom, setZoom] = useState(13);\r\n    const [center, setCenter] = useState({ lat: 59.911491, lng: 10.757933 });\r\n\r\n    const handlePlacesChanged = place => {\r\n      setZoom(13);\r\n      setCenter({\r\n        lat: place.geometry.location.lat(),\r\n        lng: place.geometry.location.lng()\r\n      });\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <GoogleMap\r\n          zoom={zoom}\r\n          ref={mapRef}\r\n          center={center}\r\n          defaultOptions={{\r\n            disableDefaultUI: true, // disable default map UI\r\n            draggable: true, // make map draggable\r\n            keyboardShortcuts: false, // disable keyboard shortcuts\r\n            scaleControl: true, // allow scale controle\r\n            scrollwheel: true, // allow scroll wheel\r\n            styles: styles // change default map styles\r\n          }}\r\n          onDragEnd={() => setCenter(mapRef.current.getCenter())}\r\n          onZoomChanged={() => setZoom(mapRef.current.getZoom())}\r\n        >\r\n          {//curly brace here lets you write javscript in JSX\r\n          data.data.map(item => (\r\n            <Marker\r\n              key={item.id}\r\n              title={item.name}\r\n              name={item.name}\r\n              position={{ lat: item.lat, lng: item.lng }}\r\n            />\r\n          ))}\r\n          <SearchBox onPlacesChanged={handlePlacesChanged} />\r\n        </GoogleMap>\r\n      </div>\r\n    );\r\n  })\r\n);\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Map from \"./Map\";\n\nconst styles = {\n  width: \"100%\",\n  height: \"536px\"\n};\n\nfunction App() {\n  return (\n    <div style={styles}>\n      <Map\n        defaultOptions={{ scaleControl: true }}\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyBt5F_65miIiCpSgOEmbg3hACbgU0RwZas&libraries=visualization,drawing,geometry,places`}\n        loadingElement={\n          <div style={{ height: `calc(100vh - 112px)` }}> Loading... </div>\n        }\n        containerElement={<div style={{ height: `calc(100vh - 112px)` }} />}\n        mapElement={<div style={{ height: `calc(100vh - 112px)` }} />}\n      />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}